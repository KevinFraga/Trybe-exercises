# Exerc√≠cio 1: Em um contexto de orienta√ß√£o a objetos, como podemos definir o que s√£o mensagens e qual a sua import√¢ncia?

# Mensagens s√£o a forma padronizada de comunica√ß√£o entre as entidades


# Exerc√≠cio 2: Para exercitar nossa capacidade de abstra√ß√£o, vamos modelar algumas partes de um software de geometria. Como poder√≠amos modelar um objeto ret√¢ngulo?
# üê¶ Para ajudar, segue o exemplo do quadrado. Vamos utilizar a seguinte nota√ß√£o para descrever nossas abstra√ß√µes:

# Nome da abstra√ß√£o
# Quadrado

# atributos/estados
# - lado (tamanho)

# comportamentos
# - calcular area (lado * lado)
# - calcular per√≠metro (4 * lado)

class Quadrado:
    def __init__(self, side):
        self.side = side

    def calculate_area(self):
        self.area = self.side * self.side

    def calculate_perimeter(self):
        self.perimeter = self.side * 4


# Exerc√≠cio 3: E como poder√≠amos definir um c√≠rculo? Qual seu nome, atributos e comportamentos?

class Circulo:
    def __init__(self, radius):
        self.radius = radius

    def calculate_area(self):
        self.area = self.radius * self.radius * 3.14

    def calculate_perimeter(self):
        self.perimeter = self.radius * 2 * 3.14


# Exerc√≠cio 4: Vamos mudar um pouco nosso contexto para um sistema de vendas de uma cafeteria. Como podemos abstrair um pedido composto por v√°rios itens? Qual seu nome, atributos e comportamentos?

class Order:
    def __init__(self, client, selection, payment_method):
        self.client = client
        self.selection = selection
        self.payment_method = payment_method

    def calculate_bill(self):
        sum = 0
        for item in self.selection:
            sum += item.price
        self.bill = sum


# Exerc√≠cio 5: Notou que os pilares da orienta√ß√£o a objetos come√ßam a manifestar a medida que fizemos nossos exerc√≠cios de modelagem? Que tal agora ent√£o modelarmos uma televis√£o?
# üê¶ Pense em como encapsular comportamentos como o estado (ligado/desligado), ou a taxa de varia√ß√£o do volume, que muda de TV para TV etc.

class TV:
    def __init__(self, on_off, volume, channel):
        self.on_off = on_off
        self.volume = volume
        self.channel = channel

    def turn_on_off(self):
        self.on_off = not self.on_off

    def change_volume(self, amount):
        self.volume += amount

    def change_channel(self, new_channel):
        self.channel = new_channel
